# ref https://medium.com/@kyomind/linux-dev-setup-2705a89b6f48
source /usr/local/opt/zinit/zinit.zsh

# zsh 套件四天王
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-history-substring-search
zinit light zdharma-continuum/fast-syntax-highlighting

# Oh My Zsh 功能
zinit snippet OMZ::lib/completion.zsh
zinit snippet OMZ::lib/history.zsh
zinit snippet OMZ::lib/key-bindings.zsh
zinit snippet OMZ::lib/theme-and-appearance.zsh

# key binding
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey ',' autosuggest-accept

# 其他
zinit load djui/alias-tips

# history setting
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt SHARE_HISTORY             # Share history between all sessions.
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_BEEP

## zsh history ignore pattern 
zshaddhistory() {
  # Match 'git commit' or the alias 'git ci'
  [[ $1 =~ '^git (commit|ci)' ]] && return 1
  return 0  # Add other commands to history
}

## install an homebrew formula without updating homebrew itself
export HOMEBREW_NO_AUTO_UPDATE=

# eza: a ls replacement
alias ls='eza --grid --color auto --icons --sort=type'
alias ll='eza --long --color always --icons --sort=type'
alias la='eza --grid --all --color auto --icons --sort=type'
alias lla='eza --long --all --color auto --icons --sort=type'
alias lr='eza -lR'

# gnu find(findutils) as find
export PATH="/opt/homebrew/opt/findutils/libexec/gnubin:$PATH"

# gnu-tar as tar
export PATH="/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH" 

# gnu-sed as sed
export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"

# gnu-grep as grep
export PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"

# gawk
export PATH="/opt/homebrew/opt/gawk/libexec/gnubin:$PATH"
alias gawk="awk"

# inetutils: ftp/rcp/rlogin/rsh/telnet?
export PATH="/usr/local/opt/inetutils/libexec/gnubin:$PATH"

# coreutils
alias touch="gtouch"

# zoxide
eval "$(zoxide init zsh)"
alias j="z"

# fd
## debian 12
## did it once `ln -s $(which fdfind) ~/.local/bin/fd`

# fzf: A command-line fuzzy finder
## osx
# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

## download binary to /usr/local/bin, debian 12 
# eval "$(fzf --zsh)"
# alias preview="fzf --preview 'bat --color \"always\" {}'"

## add support for ctrl+o to open selected file in VS Code
export FZF_DEFAULT_COMMAND='fd --type file'
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"

## ncdu: du replacemnt
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"

## thefuck
eval $(thefuck --alias)

# nvm
## https://yoember.com/nodejs/the-best-way-to-install-node-js-with-yarn/
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# mosh 
mosh-screen () {
  mosh "$@" -- screen -dR mosh-session
}

mosh-tmux () {
  mosh "$@" -- tmux new -ADs mosh-session
}

# osx port listening
# https://stackoverflow.com/questions/4421633/who-is-listening-on-a-given-tcp-port-on-mac-os-x
listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

# merge pdf
cpdf () { 
    gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile="$1" "${@:2}"
}

# uuid depends on python
alias uuid="python -c 'import sys,uuid; sys.stdout.write(uuid.uuid4().hex)' | pbcopy && pbpaste && echo"

# homebrew locale problem/vim report error/complain of mosh to remote linux machie
# https://ryudo.tw/blog/2015/02/20/fix-locale-in-linux/
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# starship 
eval "$(starship init zsh)"

# doom emacs
export PATH="$HOME/.emacs.d/bin:$PATH"

# rga
rga-fzf() {
	RG_PREFIX="rga --files-with-matches"
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="70%:wrap"
	)" &&
	echo "opening $file" &&
	# xdg-open "$file"
	open "$file"
}

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/Users/seathief/.sdkman"
[[ -s "/Users/seathief/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/seathief/.sdkman/bin/sdkman-init.sh"


# mactex
eval "$(/usr/libexec/path_helper)"

## python
export PATH="$(brew --prefix)/opt/python@3.12/libexec/bin:$PATH"

## golang
export GOROOT=$(brew --prefix go)/libexec
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH


## ngrok
if command -v ngrok &>/dev/null; then
  eval "$(ngrok completion)"
fi

## PostgreSQL
export PATH="/opt/homebrew/opt/postgresql@16/bin:$PATH"

# Added by Windsurf
export PATH="$HOME/.codeium/windsurf/bin:$PATH"

# vscode terminal integration
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"

# default editor
export EDITOR="code --wait"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="/usr/local/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# packer
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/packer packer

# terraform
#autoload -U +X bashcompinit && bashcompinit
#complete -o nospace -C /usr/local/bin/terraform terraform

# direnv
eval "$(direnv hook zsh)"

# OPENAI
export OPENAI_API_KEY=$(pass show openai)

# Shell-GPT integration ZSH v0.2
_sgpt_zsh() {
if [[ -n "$BUFFER" ]]; then
    _sgpt_prev_cmd=$BUFFER
    BUFFER+="⌛"
    zle -I && zle redisplay
    BUFFER=$(sgpt --shell <<< "$_sgpt_prev_cmd" --no-interaction)
    zle end-of-line
fi
}
zle -N _sgpt_zsh
bindkey ^l _sgpt_zsh
# Shell-GPT integration ZSH v0.2

# conda refine env
conda activate main